import { Operation, Transaction } from '@hiveio/dhive';
import { IStep } from '../swaps/swap.interface';
export declare enum KeychainRequestTypes {
    decode = "decode",
    encode = "encode",
    encodeWithKeys = "encodeWithKeys",
    signBuffer = "signBuffer",
    broadcast = "broadcast",
    addAccountAuthority = "addAccountAuthority",
    removeAccountAuthority = "removeAccountAuthority",
    removeKeyAuthority = "removeKeyAuthority",
    addKeyAuthority = "addKeyAuthority",
    signTx = "signTx",
    post = "post",
    vote = "vote",
    custom = "custom",
    signedCall = "signedCall",
    transfer = "transfer",
    sendToken = "sendToken",
    delegation = "delegation",
    witnessVote = "witnessVote",
    proxy = "proxy",
    powerUp = "powerUp",
    powerDown = "powerDown",
    createClaimedAccount = "createClaimedAccount",
    createProposal = "createProposal",
    removeProposal = "removeProposal",
    updateProposalVote = "updateProposalVote",
    addAccount = "addAccount",
    convert = "convert",
    recurrentTransfer = "recurrentTransfer",
    swap = "swap"
}
export declare enum KeychainKeyTypes {
    posting = "Posting",
    active = "Active",
    memo = "Memo"
}
export declare enum KeychainKeyTypesLC {
    posting = "posting",
    active = "active",
    memo = "memo"
}
declare type CommonRequestParams = {
    rpc?: string;
    domain: string;
    key?: string;
};
export declare type RequestDecode = CommonRequestParams & {
    type: KeychainRequestTypes.decode;
    username: string;
    message: string;
    method: KeychainKeyTypes;
};
export declare type RequestEncode = CommonRequestParams & {
    type: KeychainRequestTypes.encode;
    username: string;
    receiver: string;
    message: string;
    method: KeychainKeyTypes;
};
export declare type RequestEncodeWithKeys = CommonRequestParams & {
    type: KeychainRequestTypes.encodeWithKeys;
    username: string;
    publicKeys: string[];
    message: string;
    method: KeychainKeyTypes;
};
export declare type ExcludeCommonParams<T> = Omit<T, 'rpc' | 'type' | 'key' | 'domain'>;
export declare type RequestSignBuffer = CommonRequestParams & {
    type: KeychainRequestTypes.signBuffer;
    username?: string;
    message: string;
    method: KeychainKeyTypes;
    title?: string;
};
export declare type RequestBroadcast = CommonRequestParams & {
    type: KeychainRequestTypes.broadcast;
    username: string;
    operations: string | Operation[];
    method: KeychainKeyTypes;
};
export declare type RequestAddAccountAuthority = CommonRequestParams & {
    type: KeychainRequestTypes.addAccountAuthority;
    authorizedUsername: string;
    role: KeychainKeyTypes;
    weight: number;
    username: string;
};
export declare type RequestRemoveAccountAuthority = CommonRequestParams & {
    type: KeychainRequestTypes.removeAccountAuthority;
    authorizedUsername: string;
    role: KeychainKeyTypes;
    username: string;
};
export declare type RequestAddKeyAuthority = CommonRequestParams & {
    type: KeychainRequestTypes.addKeyAuthority;
    authorizedKey: string;
    role: KeychainKeyTypes;
    username: string;
    weight: number;
};
export declare type RequestRemoveKeyAuthority = CommonRequestParams & {
    type: KeychainRequestTypes.removeKeyAuthority;
    authorizedKey: string;
    role: KeychainKeyTypes;
    username: string;
};
export declare type RequestSignTx = CommonRequestParams & {
    type: KeychainRequestTypes.signTx;
    username: string;
    tx: Transaction;
    method: KeychainKeyTypes;
};
export declare type RequestPost = CommonRequestParams & {
    type: KeychainRequestTypes.post;
    username: string;
    title?: string;
    body: string;
    parent_perm: string;
    parent_username?: string;
    json_metadata: string;
    permlink: string;
    comment_options: string;
};
export declare type RequestVote = CommonRequestParams & {
    type: KeychainRequestTypes.vote;
    username: string;
    permlink: string;
    author: string;
    weight: string | number;
};
export declare type RequestCustomJSON = CommonRequestParams & {
    type: KeychainRequestTypes.custom;
    username?: string;
    id: string;
    method: KeychainKeyTypes;
    json: string;
    display_msg: string;
};
export declare type RequestSignedCall = CommonRequestParams & {
    type: KeychainRequestTypes.signedCall;
    username: string;
    method: string;
    params: string;
    typeWif: KeychainKeyTypes;
};
export declare type RequestTransfer = CommonRequestParams & {
    type: KeychainRequestTypes.transfer;
    username?: string;
    to: string;
    amount: string;
    memo: string;
    enforce: boolean;
    currency: string;
};
export declare type RequestSendToken = CommonRequestParams & {
    type: KeychainRequestTypes.sendToken;
    username: string;
    to: string;
    amount: string;
    memo: string;
    currency: string;
};
export declare type RequestDelegation = CommonRequestParams & {
    type: KeychainRequestTypes.delegation;
    username?: string;
    delegatee: string;
    amount: string;
    unit: string;
};
export declare type RequestWitnessVote = CommonRequestParams & {
    type: KeychainRequestTypes.witnessVote;
    username?: string;
    witness: string;
    vote: boolean;
};
export declare type RequestProxy = CommonRequestParams & {
    type: KeychainRequestTypes.proxy;
    username?: string;
    proxy: string;
};
export declare type RequestPowerUp = CommonRequestParams & {
    type: KeychainRequestTypes.powerUp;
    username: string;
    recipient: string;
    hive: string;
};
export declare type RequestPowerDown = CommonRequestParams & {
    type: KeychainRequestTypes.powerDown;
    username: string;
    hive_power: string;
};
export declare type RequestCreateClaimedAccount = CommonRequestParams & {
    type: KeychainRequestTypes.createClaimedAccount;
    username: string;
    new_account: string;
    owner: string;
    active: string;
    posting: string;
    memo: string;
};
export declare type RequestUpdateProposalVote = CommonRequestParams & {
    type: KeychainRequestTypes.updateProposalVote;
    username: string;
    proposal_ids: string | number[];
    approve: boolean;
    extensions: string | any[];
};
export declare type RequestCreateProposal = CommonRequestParams & {
    type: KeychainRequestTypes.createProposal;
    username: string;
    receiver: string;
    subject: string;
    permlink: string;
    start: string;
    end: string;
    daily_pay: string;
    extensions: string;
};
export declare type RequestRemoveProposal = CommonRequestParams & {
    type: KeychainRequestTypes.removeProposal;
    username: string;
    proposal_ids: string | number[];
    extensions: string;
};
export declare type RequestAddAccountKeys = {
    posting?: string;
    active?: string;
    memo?: string;
};
export declare type RequestAddAccount = CommonRequestParams & {
    type: KeychainRequestTypes.addAccount;
    username: string;
    keys: RequestAddAccountKeys;
};
export declare type RequestConvert = CommonRequestParams & {
    type: KeychainRequestTypes.convert;
    username: string;
    amount: string;
    collaterized: boolean;
};
export declare type RequestRecurrentTransfer = CommonRequestParams & {
    type: KeychainRequestTypes.recurrentTransfer;
    username?: string;
    to: string;
    amount: string;
    currency: string;
    memo: string;
    recurrence: number;
    executions: number;
};
export declare type RequestSwap = CommonRequestParams & {
    type: KeychainRequestTypes.swap;
    steps: IStep[];
    slippage: number;
    startToken: string;
    endToken: string;
    amount: number;
    username?: string;
};
export declare type KeychainRequestData = (RequestDecode | RequestEncodeWithKeys | RequestEncode | RequestSignBuffer | RequestBroadcast | RequestAddAccountAuthority | RequestRemoveAccountAuthority | RequestAddKeyAuthority | RequestRemoveKeyAuthority | RequestSignTx | RequestPost | RequestVote | RequestCustomJSON | RequestSignedCall | RequestTransfer | RequestSendToken | RequestDelegation | RequestWitnessVote | RequestProxy | RequestPowerUp | RequestPowerDown | RequestCreateClaimedAccount | RequestUpdateProposalVote | RequestCreateProposal | RequestRemoveProposal | RequestAddAccount | RequestConvert | RequestRecurrentTransfer | RequestSwap) & {
    redirect_uri?: string;
};
export declare type RequestId = {
    request_id: number;
};
export declare type KeychainRequest = KeychainRequestData & RequestId;
export declare type HiveErrorMessage = {
    message: string;
    code: number;
    data?: any;
};
export declare type RequestSuccess = {
    data: KeychainRequestData;
    request_id: number;
    result: any;
    message: string;
};
export declare type RequestError = {
    data: KeychainRequestData;
    request_id: number;
    error: any;
    message: string;
};
export declare type RequestResponse = {
    success: boolean;
    error: any | null;
    result: any | null;
} & (RequestSuccess | RequestError);
export declare type KeychainRequestWrapper = {
    command: string;
    domain: string;
    request: KeychainRequest;
    request_id: number;
};
export {};
