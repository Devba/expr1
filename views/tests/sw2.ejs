
<!DOCTYPE html>
<html>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<body>
<script>

 /*var tempalte=   {
     title: "Submit your Github username",
     input: "text",
     inputAttributes: {
         autocapitalize: "off"
     },
     showCancelButton: true,
     confirmButtonText: "Look up",
     showLoaderOnConfirm: true,
     preConfirm: async (login) => {
         try {
             const githubUrl = `  https://api.github.com/users/${login}   `;
             const response = await fetch(githubUrl);
             if (!response.ok) {
                 return Swal.showValidationMessage(`
        ${JSON.stringify(await response.json())}
    `);
             }
             return response.json();
         } catch (error) {
             Swal.showValidationMessage(`
    Request failed: ${error}
    `);
         }
     },
     allowOutsideClick: () => !Swal.isLoading()
 }).then((result) =>

 {
     if (result.isConfirmed) {
         Swal.fire({
             title: `${result.value.login}'s avatar`,
             imageUrl: result.value.avatar_url
         });
     }
 };
*/
Swal.fire({
    title: "Submit your Github username",
    input: "text",
    inputAttributes: {
    autocapitalize: "off"
    },
    showCancelButton: true,
    confirmButtonText: "Look up",
    showLoaderOnConfirm: true,
    preConfirm: async (login) => {
    try {
    //const githubUrl = `  https://api.github.com/users/${login}   `;
   // const githubUrl = "/checklic/"+login;
    const githubUrl = "/checklic";


    const response = await fetch(githubUrl, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({a: 1, b: 'Textual content'})
    });
    if (!response.ok) {
        return Swal.showValidationMessage(`
        ${JSON.stringify(await response.json())}
        //${JSON.stringify(await response)}
    `);
    }
    //return response;
    return response.json();
    } catch (error) {
    Swal.showValidationMessage(`
    Request failed: ${error}
    `);
    }
    },
    allowOutsideClick: () => !Swal.isLoading()
}).then((result) => {
if (result.isConfirmed) {
    if(result.value.noderes=="Incorrect HOA License"){
        Swal.showValidationMessage(`
                 Request failed: algo pasa
         `);
    }
    else {
        Swal.fire({
            title: `${result.value.login}'s avatar`,
            imageUrl: result.value.avatar_url
        });
    }
}
});
</script>
</body>
</html>